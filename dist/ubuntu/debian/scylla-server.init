#! /bin/sh
### BEGIN INIT INFO
# Provides:          scylla-server
# Required-Start:	$remote_fs $syslog
# Required-Stop:	$remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Scylla database server
# Description:        Scylla is a highly scalable, eventually consistent,
#		      distributed, partitioned row DB.
### END INIT INFO

#
# Author: Takuya ASADA<syuu@scylladb.com>
#

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Scylla database server"
NAME=scylla-server

SCYLLA_SERVER=scylla-server
DAEMON=/usr/lib/scylla/scylla_run
PIDFILE=/var/run/scylla-server.pid

SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
eval "`grep -v -e "^\s*#" -e "^$" /etc/default/scylla-server|sed -e 's/^/export /'`"
eval "`grep -v -e "^\s*#" -e "^$" /etc/scylla.d/*.conf|sed -e 's/^/export /'`"

# Define LSB log_* functions.
. /lib/lsb/init-functions

do_start()
{
	if [ "$AMI" = "yes" ]; then
		/usr/lib/scylla/scylla-ami/scylla_ami_setup
 	fi
	/usr/lib/scylla/scylla_prepare	
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   other if daemon could not be started or a failure occured
	start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile --background --exec $DAEMON
}

do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   other if daemon could not be stopped or a failure occurred
	start-stop-daemon --stop --quiet --pidfile $PIDFILE --retry 5
	 /usr/lib/scylla/scylla_stop
}

case "$1" in
  start)
	if init_is_upstart; then
		exit 1
	fi
	log_daemon_msg "Starting $DESC" "$SCYLLA_SERVER"
	do_start
	case "$?" in
		0) log_end_msg 0 ;;
		1) log_progress_msg "already started"
		   log_end_msg 0 ;;
		*) log_end_msg 1 ;;
	esac

	;;
  stop)
	if init_is_upstart; then
		exit 0
	fi
	log_daemon_msg "Stopping $DESC" "$SCYLLA_SERVER"
	do_stop
	case "$?" in
		0) log_end_msg 0 ;;
		1) log_progress_msg "already stopped"
		   log_end_msg 0 ;;
		*) log_end_msg 1 ;;
	esac

	;;
  restart|force-reload)
	if init_is_upstart; then
		exit 1
	fi
	$0 stop
	$0 start
	;;
  status)
	status_of_proc -p $PIDFILE $DAEMON $SCYLLA_SERVER && exit 0 || exit $?
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|rotate|restart|force-reload|status}" >&2
	exit 3
	;;
esac

:
